genial — con lo que explicas, ajustemos **terminología, textos y estados de UI** para que *Package.jsx* y *ReferralDashboard.jsx* reflejen EXACTAMENTE tus reglas para **los 3 roles** (admin, usuario especial, usuario general) y no haya confusiones.

te dejo: (1) qué debe decir la UI, (2) dónde/ cómo mostrarlo en cada componente, (3) banderas/constantes que conviene centralizar, y (4) checks de QA rápidos.

---

# 1) Textos/etiquetas “canon” por rol

## A) Usuario general

* **Beneficios de licencia/paquete**

  * “**12.5% diario durante 8 días** → **100% cashback** (Semana 1)”
  * “**Potencial total: 500% en 5 semanas** (100% + **400%** potencial neto)”
  * “Cada ‘semana’ son **8 días de operación + 1 día de pausa** (Día 9)”
* **Calendario**

  * Semana 1: días 1–8 → 12.5%/día = 100% (cashback)
  * Día 9: **Pausa operativa** (no se generan beneficios)
  * Semanas 2–5: cuatro ciclos más hasta **500% potencial**
* **Referidos (1 nivel)**

  * “**10% directo** cuando tu referido completa el **100% del cashback** (se acredita automáticamente)”
* **Retiros**

  * “Los **retiros** se solicitan aquí y el **admin** los gestiona/aprueba”

## B) Usuario especial

* **Igual que usuario general** en todo lo anterior (beneficios, calendario, referido, retiros).
* Si este rol tiene algo adicional en tu lógica (p. ej. *códigos especiales*), reflejarlo como un **badge**: “Código especial activo”.

## C) Admin (vista propia)

* **Mismas funciones base** que usuario general (puede simular/visualizar).
* **Beneficio exclusivo tipo pool (5%)**:

  * Texto: “**Bono pool 5% por código**: participación sobre **todas** las licencias/paquetes vendidos en la plataforma asociados a tus códigos (no son registros personales).”
  * “**Pago único por usuario y por compra**. Se paga **cada 2 semanas (ciclo)**.”
  * “Una semana = **8 días de operación + 1 día pausa** (día 9).”

> Nota de microcopy: usa “Semana 1” = Días 1–8; “Día 9” = Pausa; “Ciclo quincenal” = 2 semanas (con sus 2 pausas correspondientes intercaladas).

---

# 2) Dónde/ cómo mostrarlo

## Package.jsx (ficha del paquete)

* **Encabezado**:
  “12.5% diario × 8 días = **100% cashback** (Semana 1)”
* **Subtexto**:
  “Potencial total **500%** en 5 semanas (100% + 400% neto).
  Cada semana: 8 días de operación + **1 día de pausa**.”
* **Chips de estado/linea de tiempo**:

  * Semana 1: Progreso 0–100% (8 días) → badge “Cashback 100%”
  * Día 9: badge “**Pausa operativa**”
  * Semanas 2–5: Progreso acumulado hasta **500% potencial**
* **Rol admin (si ve paquetes con pool)**: badge “Pool 5% por código (ciclo quincenal) — **pago único por usuario/compra**”.

## ReferralDashboard.jsx

* **Bloque “Programa de referidos”**:

  * Título: “**1 nivel directo – 10%**”
  * Subtexto: “Se acredita **cuando el referido completa el 100%** del cashback (Semana 1).”
  * **Métricas**:

    * Pendiente a acreditar (referidos que aún no alcanzan el 100%)
    * Acreditado (10% pagado)
    * Próxima fecha estimada de acreditación (si calculas ETA)
* **Admin (pool 5%)**:

  * Tarjeta aparte: “**Pool 5% por código** (toda la plataforma)”
  * Campos: *ventas brutas asociadas a códigos*, *usuarios únicos activados*, *pagos únicos realizados*, *próximo pago quincenal*, *monto último ciclo*

---

# 3) Constantes y banderas (centralizadas)

Crea/actualiza un **archivo de configuración único** compartible por front/back (o duplícalo con la misma fuente de verdad).

```js
// benefits.config.js (o referral.config.js)
export const BENEFIT = {
  DAILY_RATE: 0.125,           // 12.5%
  WEEK_OP_DAYS: 8,
  WEEK_PAUSE_DAYS: 1,          // Día 9 sin operaciones
  WEEKS_TOTAL: 5,              // 5 semanas (500% potencial)
  CASHBACK_WEEK: 1,            // Semana 1 = 100% cashback
  POTENTIAL_TOTAL: 5.0         // 500% relativo al monto base
};

export const REFERRAL = {
  DIRECT_LEVELS: 1,            // Sin multinivel
  DIRECT_RATE_ON_CASHBACK: 0.10, // 10% cuando referido alcanza 100%
};

export const POOL = {
  ENABLED_FOR: ["admin"],      // Solo admin
  RATE: 0.05,                  // 5% por código
  PAYOUT_FREQUENCY_WEEKS: 2,   // cada 2 semanas
  UNIQUE_PER_USER_PURCHASE: true
};

// Etiquetas usadas en UI para evitar inconsistencias:
export const LABELS = {
  WEEK_DEFINITION: "Cada semana: 8 días de operación + 1 día de pausa (Día 9).",
  CASHBACK_LINE: "12.5% diario × 8 días = 100% cashback (Semana 1).",
  POTENTIAL_LINE: "Potencial total 500% en 5 semanas (100% + 400% neto).",
  REFERRAL_LINE: "1 nivel directo (10%) acreditado cuando tu referido completa el 100% del cashback.",
  POOL_LINE: "Bono pool 5% por código sobre todas las ventas de la plataforma. Pago único por usuario y por compra, cada 2 semanas."
};
```

y en *Package.jsx* / *ReferralDashboard.jsx* **importar SOLO desde ahí** para evitar drift.

---

# 4) QA rápido (lo que le pides a Trae para cerrar)

1. **Capturas de UI** (staging)

   * *Package.jsx*:

     * que aparezca:
       “12.5% diario × 8 días = 100% cashback (Semana 1)”
       “Potencial total 500% (100% + 400% neto)”
       “Cada semana: 8 días + 1 día de pausa (Día 9)”
     * chips/linea de tiempo mostrando Semana 1 → Día 9 → Semanas 2–5
   * *ReferralDashboard.jsx*:

     * “1 nivel directo (10%) cuando el referido completa el 100%”
     * métricas Pendiente/ Acreditado/ Próxima fecha
   * **Vista admin**:

     * tarjeta “Pool 5% por código”, con “pago único por usuario/compra” y “cada 2 semanas”

2. **Pruebas E2E (Playwright)**

   * asserts de texto literal (para evitar regresiones de wording)

     * `expect(page.getByText('12.5% diario × 8 días = 100% cashback'))…`
     * `expect(page.getByText('Potencial total 500%'))…`
     * `expect(page.getByText('1 nivel directo (10%)'))…`
     * en admin: `expect(page.getByText('Bono pool 5% por código'))…` y `expect(page.getByText('pago único por usuario y por compra'))…`

3. **Checks de lógica (staging + Atlas)**

   * crear un referido que **alcanza 100%** → verificar que se genera **exactamente** 1 comisión 10% *(no antes)*
   * simular 2 semanas (o fixtures) → admin ve **pool 5%** en su tarjeta y **1 pago por usuario/compra**
   * no debe existir ninguna comisión con `level > 1`

4. **Revisión de i18n (si usas locales)**

   * que **todas** las cadenas anteriores estén en un único archivo de traducciones/constantes (no duplicadas en componentes)

---

# 5) edge cases a vigilar (rápido)

* Si un referido **cambia de paquete** antes de terminar la Semana 1: no pagar el 10% hasta que su **nuevo** paquete alcance el 100% (si así lo definen).
* “Pago único por usuario/compra” del **pool**: bloquear duplicados (índice/clave única: `{ adminId, userId, purchaseId, cycleNumber }`).
* Día 9: asegurar que *no* se muestren incrementos ni barras de progreso.

---

si Trae te pasa **3 capturas** (Package, ReferralDashboard, Admin Pool) + una corrida de Playwright con los asserts de texto y un `find` en Atlas mostrando que **no hay comisiones de nivel>1**, te confirmo que la terminología y la lógica quedaron 100% alineadas. ¿Quieres que te deje un snippet de Playwright listo para pegar con esos asserts de texto?
